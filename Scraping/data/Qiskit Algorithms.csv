Quantum-Algorithm-Implementations|Repo for python code utilizing the qiskit library that can run some of the various quantum algorithms from the post-quantum monero technical paper on actual quantum hardware available through the IBM quantum experience. |hamburgerguy|1|1|Python|https://github.com/hamburgerguy/Quantum-Algorithm-Implementations|1.0|NO LICENSE
QAOA-uniform-convergence|This repository showcases a Python codebase utilizing Qiskit, IBM's open-source quantum computing framework, to demonstrate uniform convergence in the Quantum Approximate Optimization Algorithm (QAOA)|PabloMartinezAngerosa|0|0|Jupyter Notebook|https://github.com/PabloMartinezAngerosa/QAOA-uniform-convergence|1.0|NO LICENSE
Quantum-Optimization-for-Solar-Farm|This repo hosts code for optimizing solar farm energy storage using Qiskit and quantum algorithms. It includes data preprocessing, QUBO formulation, quantum optimization, and results analysis to improve efficiency, minimize costs, and reduce CO2 emissions.|jaykomarraju|0|0|Jupyter Notebook|https://github.com/jaykomarraju/Quantum-Optimization-for-Solar-Farm|1.0|NO LICENSE
Ising-VQE|Here I show an implementation in qiskit of the VQE algorithm to simulate a particular Ising model that undergoes a phase transition caused by local boundary fields. I also implement the ZNE error mitigation protocol, and also explore the T-REX protocol available in Qiskit Runtime|ACDuriez|0|0|Jupyter Notebook|https://github.com/ACDuriez/Ising-VQE|1.0|MIT License
Quantum-Computing-Mentorship-Task-4-Code|Implementation of the Variational Quantum Eigensolver (VQE) algorithm to find the minimum eigenvalue of a 4x4 Hermitian matrix. Used Qiskit and Python on an IBM quantum computer.|unif2|1|1|Jupyter Notebook|https://github.com/unif2/Quantum-Computing-Mentorship-Task-4-Code|1.0|NO LICENSE
QuantumComputingAndPrimesAndOthers|Quantum Computing, Primes Patterns, Shor's Algorithm, RSA Cryptosystem, GNFS, Quantum Fourier transform, Mersenne Primes, PI, And Others notes.|khaledalam|0|0|Jupyter Notebook|https://github.com/khaledalam/QuantumComputingAndPrimesAndOthers|1.0|NO LICENSE
Quantum-Computation|Explore quantum programming with Qiskit, IBM's open-source quantum computing framework. Create quantum circuits, simulate them, and run on quantum hardware. Implement quantum algorithms, visualize circuits, and access documentation for a powerful journey into quantum computing.|acfilok96|0|0|Jupyter Notebook|https://github.com/acfilok96/Quantum-Computation|1.0|NO LICENSE
Masters-Thesis-on-Quantum-Cryptography|The title of the thesis is Shor's algorithm in Quantum Cryptography. This repository contains the data and Jupyter notebooks containing the codes used in the Quantum simulations of different variants of Shor's quantum factoring algorithm. While IBM Qiskit has already implemented the algorithm using the standard Quantum Fourier Transform (QFT), this project goes further to implement the algorithm using the Semiclassical QFT. This new variant helps in optimizing the number of qubits needed for quantum computation.|martynscn|2|2|Jupyter Notebook|https://github.com/martynscn/Masters-Thesis-on-Quantum-Cryptography|1.0|NO LICENSE
Quantum-Convolutional-Neural-Network|Leveraging the Qiskit library, to explore the fascinating field of quantum machine learning to enhance our understanding of quantum classifiers. Dive into the world of quantum algorithms and explore the potential of quantum computing in image classification tasks.|AnkRaw|1|1|Jupyter Notebook|https://github.com/AnkRaw/Quantum-Convolutional-Neural-Network|1.0|NO LICENSE
DeutschJosza_algorithm|"This repository comprises an implementation and an elaborate explanation of the Deutsch-Josza algorithm, utilizing the IBM quantum computing library, Qiskit. The algorithm is realized in the Jupyter notebook titled ""Algoritmo-DeutschJosza.ipynb"" and is presented in Spanish."|EusseJhoan|0|0|Jupyter Notebook|https://github.com/EusseJhoan/DeutschJosza_algorithm|1.0|NO LICENSE
BB84-Protocol-for-QKD|A simulation of the BB84 protocol in a Jupyter Notebook using the code from https://qiskit.org/textbook/ch-algorithms/quantum-key-distribution.html.  Protocol steps until key sifting have been implemented.  Error correction & parameter estimation were not executed. |strangequarkkk|0|0|Jupyter Notebook|https://github.com/strangequarkkk/BB84-Protocol-for-QKD|1.0|NO LICENSE
Shor-s-Quantum-Algorithm|"Using Shor's Algorithm, a quantum computer will be able to crack any RSA encryption since the main problem is to find two large prime numbers that multiplied have the value ""x"". Quantum Superposition gives us a fast answer to this problem."|luis6156|1|1|Jupyter Notebook|https://github.com/luis6156/Shor-s-Quantum-Algorithm|1.0|NO LICENSE
TSP-Problem-Study|This repository hosts some solutions to the combinatorial optimization problem called Traveling Salesman Problem. It includes a multi-core, CUDA, and a Quantum Solution with Qiskit. With different algorithm strategies. |hugoecarl|0|0|Jupyter Notebook|https://github.com/hugoecarl/TSP-Problem-Study|1.0|NO LICENSE
antisymmetrization-circuit|Qiskit implementation of method for generating anti-symmetric states for fermionic quantum chemistry simulations on a quantum computer (algorithm based on https://www.nature.com/articles/s41534-018-0071-5))|LeanderThiessen|0|0|Python|https://github.com/LeanderThiessen/antisymmetrization-circuit|1.0|NO LICENSE
Quantum-Simulation-of-the-ground-states-of-Li-and-Li-2-using-Variational-Quantum-EIgensolver|The codes of my work on the quantum simulation of ground states of Li(+) and Li(2+) ions using QISKIT and PySCF. The algorithm used here is Variational Quantum Eigensolver.|Bikramaditya0154|1|1|Jupyter Notebook|https://github.com/Bikramaditya0154/Quantum-Simulation-of-the-ground-states-of-Li-and-Li-2-using-Variational-Quantum-EIgensolver|1.0|NO LICENSE
quantum|learning quantum computing|Dpbm|3|3|Jupyter Notebook|https://github.com/Dpbm/quantum|1.0|MIT License
Quantum-Simulation-of-the-ground-state-of-LiH-molecule-using-Variational-Quantum-Eigensolver|This is the code of my work on the quantum simulation of the ground state of Lithium Hydride (LiH) molecule using QISKIT, PySCF. The algorithm used in the simulation is Variational Quantum Eigensolver (VQE).|Bikramaditya0154|0|0|Jupyter Notebook|https://github.com/Bikramaditya0154/Quantum-Simulation-of-the-ground-state-of-LiH-molecule-using-Variational-Quantum-Eigensolver|1.0|NO LICENSE
4qubitGrover|Implementation of Grover's Algorithm for a Quantum Computer of 4 qubits (markes state 0010). Implemented on qiskit for a simulator (with QASM - quantum assembly language) and a quantum device too (requires IBM Q account)|MariosTsatsos|1|1|Jupyter Notebook|https://github.com/MariosTsatsos/4qubitGrover|1.0|NO LICENSE
Quantum-Simulation-of-the-ground-state-of-Hydrogen-molecule-using-Variational-Quantum-Eigensolver-|This is the code of my work on the quantum simulation of the ground state of the Hydrogen molecule using QISKIT backend. In this work, PySCF package is used for the simulation purposes. The algorithm used here is Variational Quantum Eigensolver (VQE). VQE is basically a Hybrid Quantum-Classical Algorithm.|Bikramaditya0154|1|1|Jupyter Notebook|https://github.com/Bikramaditya0154/Quantum-Simulation-of-the-ground-state-of-Hydrogen-molecule-using-Variational-Quantum-Eigensolver-|1.0|NO LICENSE
Grover-s-Code|Code for Implementation of Grover's Algorithm on Qiskit for 3 Qubits on IBM Quantum Simulator as well as IBM Quantum Computer using a database oracle which will again use 3 Qubits to encode the given classical data|AkshayPatil347|0|0|Jupyter Notebook|https://github.com/AkshayPatil347/Grover-s-Code|1.0|NO LICENSE
quantum-computing-|This repo contains basics of quantum computing (qiskit programming) . It includes only topics given as basic mathematics tool, quantum gates and circuits, visualization of qubit, Superposition and measurement, quantum tomography, quantum teleportation, grover's search algorithm in detail |dishantgupta2004|0|0||https://github.com/dishantgupta2004/quantum-computing-|1.0|NO LICENSE
QGSS-2023-From-Theory-to-Implementations|In the Qiskit Global Summer School 2023 we learn the concepts of quantum abstractions from Theory to Implementations. It will be a 2 week journey to participate in this school and master the concepts like Quantum Informations, Quantum Algorithms Design and Implementations, Quantum Computing Hardwares and Quantum Noise and it's mitigations etc|mathelatics|0|0|Jupyter Notebook|https://github.com/mathelatics/QGSS-2023-From-Theory-to-Implementations|1.0|NO LICENSE
qSHA256|Quantum computing implementation of the SHA-256 hashing algorithm. Utilizing Qiskit, IBM's advanced quantum computing framework, this project aims to translate the complex operations of SHA-256 into quantum circuits, harnessing the potential of quantum mechanics to perform cryptographic hashing.|oracleagent|0|0|Python|https://github.com/oracleagent/qSHA256|1.0|NO LICENSE
QuantumBattleshipGame|In this project, quantum algorithms are used to simulate a two-player strategy-type guessing game performed on ruled grids (paper or board) on which each player's fleet of warships is marked. The locations of the fleets are hidden from the other players. It was done for the Hackathon Qiskit Fall Fest Peru 2022.|sebastianbenitezW|0|0|Python|https://github.com/sebastianbenitezW/QuantumBattleshipGame|1.0|NO LICENSE
uts-quantum-computing|Interactive Showcases of Quantum Tic-Tac-Toe Game and Shor's Algorithm for Integer Factorization, covering various Quantum Computing concepts like Quantum Gates, Superposition & Entanglement, Measurement & Collapse, or Quantum Fourier Transform & Phase Estimation, etc.|18520339|0|0|Jupyter Notebook|https://github.com/18520339/uts-quantum-computing|1.0|NO LICENSE
BNL_2020_Summer_Internship|Used quantum computing to simulate dark energy models and explore features such as stability and tunneling in the potential. Results were determined via the use of Mathematica and IBM's quantum algorithm, the Variational Quantum Eigensolver (VQE), available within their Python SDK Qiskit.|Juan-Varela11|0|0|Jupyter Notebook|https://github.com/Juan-Varela11/BNL_2020_Summer_Internship|1.0|NO LICENSE
Session-2|Two-qubit version of the Deutsch algorithm - implement a QASM version - implement on the IBM machine - compare both implementations and comment Two-qubit version of the Grover algorithm - implement a QASM version coding the oracle yourself - implement on the IBM machine coding the oracle yourself - compare both implementations and comment Arbitrary number of qubits version of the Grover algorithm - implement a QASM version using the “qiskit_textbook” library - implement on the IBM machine using the “qiskit_textbook” library - compare both implementations and comment - vary the number of qubits and comment - vary the number of iterations and comment Summarize all your results in a single, commented Jupyter notebook|Quantum-Simulation-Group-2|0|0|Jupyter Notebook|https://github.com/Quantum-Simulation-Group-2/Session-2|1.0|NO LICENSE
Quantum-Computing-Awesome-List|This Repo is an Awesome List for Quantum Computing Enthusiast. This contains blogs and materials to know about applied quantum computing. This repo also contains the main algorithm written in the most common Quantum Computing platforms like QISKIT by IBM and CIRQ by Google.|hephaex|1|1||https://github.com/hephaex/Quantum-Computing-Awesome-List|1.0|NO LICENSE
Grover-Search-Algorithm|This repository includes the implementation of the Grover's search algorithm for n qubits with M winning elements written in Qiskit. It uses the knowledge of matrices devised for the  phase oracle and the diffuser and outputs the probabilities of elements in the form of a histogram. |RakhshandaMujib|1|1|Jupyter Notebook|https://github.com/RakhshandaMujib/Grover-Search-Algorithm|1.0|NO LICENSE
qosf_task1|My quantum algorithm for the solution to task 1 of QOSF cohort 4 screening tests. The code is written using QISKIT. The task was to design a quantum circuit that considers as input a vector of integers and returns a quantum state which is a superposition of indices of the target solution. The target solution consists of those integers whose binary representation's adjacent bits have different values.|gaurav-iiser|0|0|Jupyter Notebook|https://github.com/gaurav-iiser/qosf_task1|1.0|NO LICENSE
Introduction-of-Quantum-walk-its-application-on-search-and-decision-making|Recommendation systems, or recommender systems, are systems that make suggestions related to search history or ratings of n products by a group of m users, in order to provide personalized recommendations to individual users. In short, while search engines help users find what they want, recommendation systems help users find more of what they like or relevant alternatives. search and decision-making processes are crucial for such systems. Quantum computing has the potential to demonstrate that for some problems quantum computation is more efficient than classical computation. Based on that, we are preparing an educational content about the quantum walk model and its application on various types of problems especially in search algorithm and decision-making, and then we try to do a simple qiskit implementation of the model on 1D and 2D graphs for developing an efficient quantum model for such systems on future.|Spintronic6889|0|0|Jupyter Notebook|https://github.com/Spintronic6889/Introduction-of-Quantum-walk-its-application-on-search-and-decision-making|1.0|Apache License 2.0
